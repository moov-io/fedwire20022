// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.029.001.03
package camt_029_001_03

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".RsltnOfInvstgtn", v.RsltnOfInvstgtn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.IBAN != nil {
		fedwire.AddError(&errs, baseName+".IBAN", v.IBAN.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AccountSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmendmentInformationDetails6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmendmentInformationDetails6"
	if v.OrgnlMndtId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlMndtId", v.OrgnlMndtId.Validate())
	}
	if v.OrgnlCdtrSchmeId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCdtrSchmeId", v.OrgnlCdtrSchmeId.Validate())
	}
	if v.OrgnlCdtrAgt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCdtrAgt", v.OrgnlCdtrAgt.Validate())
	}
	if v.OrgnlCdtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCdtrAgtAcct", v.OrgnlCdtrAgtAcct.Validate())
	}
	if v.OrgnlDbtr != nil {
		fedwire.AddError(&errs, baseName+".OrgnlDbtr", v.OrgnlDbtr.Validate())
	}
	if v.OrgnlDbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".OrgnlDbtrAcct", v.OrgnlDbtrAcct.Validate())
	}
	if v.OrgnlDbtrAgt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlDbtrAgt", v.OrgnlDbtrAgt.Validate())
	}
	if v.OrgnlDbtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".OrgnlDbtrAgtAcct", v.OrgnlDbtrAgtAcct.Validate())
	}
	if v.OrgnlFnlColltnDt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlFnlColltnDt", v.OrgnlFnlColltnDt.Validate())
	}
	if v.OrgnlFrqcy != nil {
		fedwire.AddError(&errs, baseName+".OrgnlFrqcy", v.OrgnlFrqcy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v AmountType3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AmountType3Choice"
	if v.InstdAmt != nil {
		fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	}
	if v.EqvtAmt != nil {
		fedwire.AddError(&errs, baseName+".EqvtAmt", v.EqvtAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4"
	fedwire.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		fedwire.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReason1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReason1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CancellationStatusReasonInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CancellationStatusReasonInformation1"
	if v.Orgtr != nil {
		fedwire.AddError(&errs, baseName+".Orgtr", v.Orgtr.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		for indx := range v.AddtlInf {
			fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case2"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if v.ReopCaseIndctn != nil {
		fedwire.AddError(&errs, baseName+".ReopCaseIndctn", v.ReopCaseIndctn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment2"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	fedwire.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount16) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount16"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ccy != nil {
		fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccountType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccountType2"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CategoryPurpose1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CategoryPurpose1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargeType2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargeType2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ChargesInformation6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ChargesInformation6"
	if v.TtlChrgsAndTaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TtlChrgsAndTaxAmt", v.TtlChrgsAndTaxAmt.Validate())
	}
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Br != nil {
		fedwire.AddError(&errs, baseName+".Br", v.Br.Validate())
	}
	if v.Pty != nil {
		fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Tax != nil {
		fedwire.AddError(&errs, baseName+".Tax", v.Tax.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification3Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	if v.ClrSysId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysId", v.ClrSysId.Validate())
	}
	fedwire.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ContactDetails2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ContactDetails2"
	if v.NmPrfx != nil {
		fedwire.AddError(&errs, baseName+".NmPrfx", v.NmPrfx.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PhneNb != nil {
		fedwire.AddError(&errs, baseName+".PhneNb", v.PhneNb.Validate())
	}
	if v.MobNb != nil {
		fedwire.AddError(&errs, baseName+".MobNb", v.MobNb.Validate())
	}
	if v.FaxNb != nil {
		fedwire.AddError(&errs, baseName+".FaxNb", v.FaxNb.Validate())
	}
	if v.EmailAdr != nil {
		fedwire.AddError(&errs, baseName+".EmailAdr", v.EmailAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorrectiveGroupInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorrectiveGroupInformation1"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	fedwire.AddError(&errs, baseName+".MsgNmId", v.MsgNmId.Validate())
	if v.CreDtTm != nil {
		fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorrectiveInterbankTransaction1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorrectiveInterbankTransaction1"
	if v.GrpHdr != nil {
		fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	}
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	if v.EndToEndId != nil {
		fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	}
	if v.TxId != nil {
		fedwire.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	}
	fedwire.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorrectivePaymentInitiation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorrectivePaymentInitiation1"
	if v.GrpHdr != nil {
		fedwire.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	}
	if v.PmtInfId != nil {
		fedwire.AddError(&errs, baseName+".PmtInfId", v.PmtInfId.Validate())
	}
	if v.InstrId != nil {
		fedwire.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	}
	if v.EndToEndId != nil {
		fedwire.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	}
	fedwire.AddError(&errs, baseName+".InstdAmt", v.InstdAmt.Validate())
	if v.ReqdExctnDt != nil {
		fedwire.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	}
	if v.ReqdColltnDt != nil {
		fedwire.AddError(&errs, baseName+".ReqdColltnDt", v.ReqdColltnDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CorrectiveTransaction1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CorrectiveTransaction1Choice"
	if v.Initn != nil {
		fedwire.AddError(&errs, baseName+".Initn", v.Initn.Validate())
	}
	if v.IntrBk != nil {
		fedwire.AddError(&errs, baseName+".IntrBk", v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceInformation2"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Ref != nil {
		fedwire.AddError(&errs, baseName+".Ref", v.Ref.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditorReferenceType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditorReferenceType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndPlaceOfBirth) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndPlaceOfBirth"
	fedwire.AddError(&errs, baseName+".BirthDt", v.BirthDt.Validate())
	if v.PrvcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".PrvcOfBirth", v.PrvcOfBirth.Validate())
	}
	fedwire.AddError(&errs, baseName+".CityOfBirth", v.CityOfBirth.Validate())
	fedwire.AddError(&errs, baseName+".CtryOfBirth", v.CtryOfBirth.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentAdjustment1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentAdjustment1"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	if v.CdtDbtInd != nil {
		fedwire.AddError(&errs, baseName+".CdtDbtInd", v.CdtDbtInd.Validate())
	}
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if v.AddtlInf != nil {
		fedwire.AddError(&errs, baseName+".AddtlInf", v.AddtlInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EquivalentAmount2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EquivalentAmount2"
	fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	fedwire.AddError(&errs, baseName+".CcyOfTrf", v.CcyOfTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7"
	if v.BIC != nil {
		fedwire.AddError(&errs, baseName+".BIC", v.BIC.Validate())
	}
	if v.ClrSysMmbId != nil {
		fedwire.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	}
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Othr != nil {
		fedwire.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericFinancialIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericFinancialIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericIdentification3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericIdentification3"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericOrganisationIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericOrganisationIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericPersonIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericPersonIdentification1"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	if v.SchmeNm != nil {
		fedwire.AddError(&errs, baseName+".SchmeNm", v.SchmeNm.Validate())
	}
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatus2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationStatus2Choice"
	if v.Conf != nil {
		fedwire.AddError(&errs, baseName+".Conf", v.Conf.Validate())
	}
	for indx := range v.RjctdMod {
		fedwire.AddError(&errs, baseName+".RjctdMod", v.RjctdMod[indx].Validate())
	}
	if v.DplctOf != nil {
		fedwire.AddError(&errs, baseName+".DplctOf", v.DplctOf.Validate())
	}
	if v.AssgnmtCxlConf != nil {
		fedwire.AddError(&errs, baseName+".AssgnmtCxlConf", v.AssgnmtCxlConf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v LocalInstrument2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "LocalInstrument2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MandateRelatedInformation6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MandateRelatedInformation6"
	if v.MndtId != nil {
		fedwire.AddError(&errs, baseName+".MndtId", v.MndtId.Validate())
	}
	if v.DtOfSgntr != nil {
		fedwire.AddError(&errs, baseName+".DtOfSgntr", v.DtOfSgntr.Validate())
	}
	if v.AmdmntInd != nil {
		fedwire.AddError(&errs, baseName+".AmdmntInd", v.AmdmntInd.Validate())
	}
	if v.AmdmntInfDtls != nil {
		fedwire.AddError(&errs, baseName+".AmdmntInfDtls", v.AmdmntInfDtls.Validate())
	}
	if v.ElctrncSgntr != nil {
		fedwire.AddError(&errs, baseName+".ElctrncSgntr", v.ElctrncSgntr.Validate())
	}
	if v.FrstColltnDt != nil {
		fedwire.AddError(&errs, baseName+".FrstColltnDt", v.FrstColltnDt.Validate())
	}
	if v.FnlColltnDt != nil {
		fedwire.AddError(&errs, baseName+".FnlColltnDt", v.FnlColltnDt.Validate())
	}
	if v.Frqcy != nil {
		fedwire.AddError(&errs, baseName+".Frqcy", v.Frqcy.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberOfCancellationsPerStatus1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberOfCancellationsPerStatus1"
	fedwire.AddError(&errs, baseName+".DtldNbOfTxs", v.DtldNbOfTxs.Validate())
	fedwire.AddError(&errs, baseName+".DtldSts", v.DtldSts.Validate())
	if v.DtldCtrlSum != nil {
		fedwire.AddError(&errs, baseName+".DtldCtrlSum", v.DtldCtrlSum.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v NumberOfTransactionsPerStatus1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "NumberOfTransactionsPerStatus1"
	fedwire.AddError(&errs, baseName+".DtldNbOfTxs", v.DtldNbOfTxs.Validate())
	fedwire.AddError(&errs, baseName+".DtldSts", v.DtldSts.Validate())
	if v.DtldCtrlSum != nil {
		fedwire.AddError(&errs, baseName+".DtldCtrlSum", v.DtldCtrlSum.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentification4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentification4"
	if v.BICOrBEI != nil {
		fedwire.AddError(&errs, baseName+".BICOrBEI", v.BICOrBEI.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OrganisationIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OrganisationIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation24) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupInformation24"
	if v.OrgnlGrpCxlId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlGrpCxlId", v.OrgnlGrpCxlId.Validate())
	}
	if v.RslvdCase != nil {
		fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	}
	fedwire.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	if v.OrgnlCreDtTm != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	}
	if v.OrgnlNbOfTxs != nil {
		fedwire.AddError(&errs, baseName+".OrgnlNbOfTxs", v.OrgnlNbOfTxs.Validate())
	}
	if v.OrgnlCtrlSum != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCtrlSum", v.OrgnlCtrlSum.Validate())
	}
	if v.GrpCxlSts != nil {
		fedwire.AddError(&errs, baseName+".GrpCxlSts", v.GrpCxlSts.Validate())
	}
	if v.CxlStsRsnInf != nil {
		for indx := range v.CxlStsRsnInf {
			fedwire.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf[indx].Validate())
		}
	}
	if v.NbOfTxsPerCxlSts != nil {
		for indx := range v.NbOfTxsPerCxlSts {
			fedwire.AddError(&errs, baseName+".NbOfTxsPerCxlSts", v.NbOfTxsPerCxlSts[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalGroupInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalGroupInformation3"
	fedwire.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	fedwire.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	if v.OrgnlCreDtTm != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalPaymentInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalPaymentInformation3"
	if v.OrgnlPmtInfCxlId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlPmtInfCxlId", v.OrgnlPmtInfCxlId.Validate())
	}
	if v.RslvdCase != nil {
		fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	}
	fedwire.AddError(&errs, baseName+".OrgnlPmtInfId", v.OrgnlPmtInfId.Validate())
	if v.OrgnlGrpInf != nil {
		fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	}
	if v.OrgnlNbOfTxs != nil {
		fedwire.AddError(&errs, baseName+".OrgnlNbOfTxs", v.OrgnlNbOfTxs.Validate())
	}
	if v.OrgnlCtrlSum != nil {
		fedwire.AddError(&errs, baseName+".OrgnlCtrlSum", v.OrgnlCtrlSum.Validate())
	}
	if v.PmtInfCxlSts != nil {
		fedwire.AddError(&errs, baseName+".PmtInfCxlSts", v.PmtInfCxlSts.Validate())
	}
	if v.CxlStsRsnInf != nil {
		for indx := range v.CxlStsRsnInf {
			fedwire.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf[indx].Validate())
		}
	}
	if v.NbOfTxsPerCxlSts != nil {
		for indx := range v.NbOfTxsPerCxlSts {
			fedwire.AddError(&errs, baseName+".NbOfTxsPerCxlSts", v.NbOfTxsPerCxlSts[indx].Validate())
		}
	}
	if v.TxInfAndSts != nil {
		for indx := range v.TxInfAndSts {
			fedwire.AddError(&errs, baseName+".TxInfAndSts", v.TxInfAndSts[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v OriginalTransactionReference13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "OriginalTransactionReference13"
	if v.IntrBkSttlmAmt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.ReqdColltnDt != nil {
		fedwire.AddError(&errs, baseName+".ReqdColltnDt", v.ReqdColltnDt.Validate())
	}
	if v.ReqdExctnDt != nil {
		fedwire.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	}
	if v.CdtrSchmeId != nil {
		fedwire.AddError(&errs, baseName+".CdtrSchmeId", v.CdtrSchmeId.Validate())
	}
	if v.SttlmInf != nil {
		fedwire.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	}
	if v.PmtTpInf != nil {
		fedwire.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	}
	if v.PmtMtd != nil {
		fedwire.AddError(&errs, baseName+".PmtMtd", v.PmtMtd.Validate())
	}
	if v.MndtRltdInf != nil {
		fedwire.AddError(&errs, baseName+".MndtRltdInf", v.MndtRltdInf.Validate())
	}
	if v.RmtInf != nil {
		fedwire.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if v.UltmtDbtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtDbtr", v.UltmtDbtr.Validate())
	}
	if v.Dbtr != nil {
		fedwire.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	}
	if v.DbtrAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	if v.DbtrAgt != nil {
		fedwire.AddError(&errs, baseName+".DbtrAgt", v.DbtrAgt.Validate())
	}
	if v.DbtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".DbtrAgtAcct", v.DbtrAgtAcct.Validate())
	}
	if v.CdtrAgt != nil {
		fedwire.AddError(&errs, baseName+".CdtrAgt", v.CdtrAgt.Validate())
	}
	if v.CdtrAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAgtAcct", v.CdtrAgtAcct.Validate())
	}
	if v.Cdtr != nil {
		fedwire.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	}
	if v.CdtrAcct != nil {
		fedwire.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	}
	if v.UltmtCdtr != nil {
		fedwire.AddError(&errs, baseName+".UltmtCdtr", v.UltmtCdtr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party6Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party6Choice"
	if v.OrgId != nil {
		fedwire.AddError(&errs, baseName+".OrgId", v.OrgId.Validate())
	}
	if v.PrvtId != nil {
		fedwire.AddError(&errs, baseName+".PrvtId", v.PrvtId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party7Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party7Choice"
	if v.Pty != nil {
		fedwire.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		fedwire.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification32) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification32"
	if v.Nm != nil {
		fedwire.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	}
	if v.PstlAdr != nil {
		fedwire.AddError(&errs, baseName+".PstlAdr", v.PstlAdr.Validate())
	}
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.CtryOfRes != nil {
		fedwire.AddError(&errs, baseName+".CtryOfRes", v.CtryOfRes.Validate())
	}
	if v.CtctDtls != nil {
		fedwire.AddError(&errs, baseName+".CtctDtls", v.CtctDtls.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransactionInformation32) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransactionInformation32"
	if v.CxlStsId != nil {
		fedwire.AddError(&errs, baseName+".CxlStsId", v.CxlStsId.Validate())
	}
	if v.RslvdCase != nil {
		fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	}
	if v.OrgnlInstrId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	}
	if v.OrgnlEndToEndId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.TxCxlSts != nil {
		fedwire.AddError(&errs, baseName+".TxCxlSts", v.TxCxlSts.Validate())
	}
	if v.CxlStsRsnInf != nil {
		for indx := range v.CxlStsRsnInf {
			fedwire.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf[indx].Validate())
		}
	}
	if v.OrgnlInstdAmt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstdAmt", v.OrgnlInstdAmt.Validate())
	}
	if v.OrgnlReqdExctnDt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlReqdExctnDt", v.OrgnlReqdExctnDt.Validate())
	}
	if v.OrgnlReqdColltnDt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlReqdColltnDt", v.OrgnlReqdColltnDt.Validate())
	}
	if v.OrgnlTxRef != nil {
		fedwire.AddError(&errs, baseName+".OrgnlTxRef", v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTransactionInformation33) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTransactionInformation33"
	if v.CxlStsId != nil {
		fedwire.AddError(&errs, baseName+".CxlStsId", v.CxlStsId.Validate())
	}
	if v.RslvdCase != nil {
		fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	}
	if v.OrgnlGrpInf != nil {
		fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	}
	if v.OrgnlInstrId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	}
	if v.OrgnlEndToEndId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlTxId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlTxId", v.OrgnlTxId.Validate())
	}
	if v.OrgnlClrSysRef != nil {
		fedwire.AddError(&errs, baseName+".OrgnlClrSysRef", v.OrgnlClrSysRef.Validate())
	}
	if v.TxCxlSts != nil {
		fedwire.AddError(&errs, baseName+".TxCxlSts", v.TxCxlSts.Validate())
	}
	if v.CxlStsRsnInf != nil {
		for indx := range v.CxlStsRsnInf {
			fedwire.AddError(&errs, baseName+".CxlStsRsnInf", v.CxlStsRsnInf[indx].Validate())
		}
	}
	if v.RsltnRltdInf != nil {
		fedwire.AddError(&errs, baseName+".RsltnRltdInf", v.RsltnRltdInf.Validate())
	}
	if v.OrgnlIntrBkSttlmAmt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlIntrBkSttlmAmt", v.OrgnlIntrBkSttlmAmt.Validate())
	}
	if v.OrgnlIntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".OrgnlIntrBkSttlmDt", v.OrgnlIntrBkSttlmDt.Validate())
	}
	if v.Assgnr != nil {
		fedwire.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	}
	if v.Assgne != nil {
		fedwire.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	}
	if v.OrgnlTxRef != nil {
		fedwire.AddError(&errs, baseName+".OrgnlTxRef", v.OrgnlTxRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation22) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation22"
	if v.InstrPrty != nil {
		fedwire.AddError(&errs, baseName+".InstrPrty", v.InstrPrty.Validate())
	}
	if v.ClrChanl != nil {
		fedwire.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if v.SvcLvl != nil {
		fedwire.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	}
	if v.LclInstrm != nil {
		fedwire.AddError(&errs, baseName+".LclInstrm", v.LclInstrm.Validate())
	}
	if v.SeqTp != nil {
		fedwire.AddError(&errs, baseName+".SeqTp", v.SeqTp.Validate())
	}
	if v.CtgyPurp != nil {
		fedwire.AddError(&errs, baseName+".CtgyPurp", v.CtgyPurp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentification5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentification5"
	if v.DtAndPlcOfBirth != nil {
		fedwire.AddError(&errs, baseName+".DtAndPlcOfBirth", v.DtAndPlcOfBirth.Validate())
	}
	if v.Othr != nil {
		for indx := range v.Othr {
			fedwire.AddError(&errs, baseName+".Othr", v.Othr[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PersonIdentificationSchemeName1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PersonIdentificationSchemeName1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PostalAddress6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PostalAddress6"
	if v.AdrTp != nil {
		fedwire.AddError(&errs, baseName+".AdrTp", v.AdrTp.Validate())
	}
	if v.Dept != nil {
		fedwire.AddError(&errs, baseName+".Dept", v.Dept.Validate())
	}
	if v.SubDept != nil {
		fedwire.AddError(&errs, baseName+".SubDept", v.SubDept.Validate())
	}
	if v.StrtNm != nil {
		fedwire.AddError(&errs, baseName+".StrtNm", v.StrtNm.Validate())
	}
	if v.BldgNb != nil {
		fedwire.AddError(&errs, baseName+".BldgNb", v.BldgNb.Validate())
	}
	if v.PstCd != nil {
		fedwire.AddError(&errs, baseName+".PstCd", v.PstCd.Validate())
	}
	if v.TwnNm != nil {
		fedwire.AddError(&errs, baseName+".TwnNm", v.TwnNm.Validate())
	}
	if v.CtrySubDvsn != nil {
		fedwire.AddError(&errs, baseName+".CtrySubDvsn", v.CtrySubDvsn.Validate())
	}
	if v.Ctry != nil {
		fedwire.AddError(&errs, baseName+".Ctry", v.Ctry.Validate())
	}
	if v.AdrLine != nil {
		for indx := range v.AdrLine {
			fedwire.AddError(&errs, baseName+".AdrLine", v.AdrLine[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Purpose2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Purpose2Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentInformation3"
	if v.Tp != nil {
		fedwire.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	}
	if v.Nb != nil {
		fedwire.AddError(&errs, baseName+".Nb", v.Nb.Validate())
	}
	if v.RltdDt != nil {
		fedwire.AddError(&errs, baseName+".RltdDt", v.RltdDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType1Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType1Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ReferredDocumentType2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ReferredDocumentType2"
	fedwire.AddError(&errs, baseName+".CdOrPrtry", v.CdOrPrtry.Validate())
	if v.Issr != nil {
		fedwire.AddError(&errs, baseName+".Issr", v.Issr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceAmount1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceAmount1"
	if v.DuePyblAmt != nil {
		fedwire.AddError(&errs, baseName+".DuePyblAmt", v.DuePyblAmt.Validate())
	}
	if v.DscntApldAmt != nil {
		fedwire.AddError(&errs, baseName+".DscntApldAmt", v.DscntApldAmt.Validate())
	}
	if v.CdtNoteAmt != nil {
		fedwire.AddError(&errs, baseName+".CdtNoteAmt", v.CdtNoteAmt.Validate())
	}
	if v.TaxAmt != nil {
		fedwire.AddError(&errs, baseName+".TaxAmt", v.TaxAmt.Validate())
	}
	if v.AdjstmntAmtAndRsn != nil {
		for indx := range v.AdjstmntAmtAndRsn {
			fedwire.AddError(&errs, baseName+".AdjstmntAmtAndRsn", v.AdjstmntAmtAndRsn[indx].Validate())
		}
	}
	if v.RmtdAmt != nil {
		fedwire.AddError(&errs, baseName+".RmtdAmt", v.RmtdAmt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation5"
	if v.Ustrd != nil {
		for indx := range v.Ustrd {
			fedwire.AddError(&errs, baseName+".Ustrd", v.Ustrd[indx].Validate())
		}
	}
	if v.Strd != nil {
		for indx := range v.Strd {
			fedwire.AddError(&errs, baseName+".Strd", v.Strd[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionInformation1"
	if v.IntrBkSttlmAmt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	}
	if v.IntrBkSttlmDt != nil {
		fedwire.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	}
	if v.ClrChanl != nil {
		fedwire.AddError(&errs, baseName+".ClrChanl", v.ClrChanl.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ResolutionOfInvestigationV03) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ResolutionOfInvestigationV03"
	fedwire.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	if v.RslvdCase != nil {
		fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	}
	fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	if v.CxlDtls != nil {
		for indx := range v.CxlDtls {
			fedwire.AddError(&errs, baseName+".CxlDtls", v.CxlDtls[indx].Validate())
		}
	}
	if v.StmtDtls != nil {
		fedwire.AddError(&errs, baseName+".StmtDtls", v.StmtDtls.Validate())
	}
	if v.CrrctnTx != nil {
		fedwire.AddError(&errs, baseName+".CrrctnTx", v.CrrctnTx.Validate())
	}
	if v.RsltnRltdInf != nil {
		fedwire.AddError(&errs, baseName+".RsltnRltdInf", v.RsltnRltdInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		fedwire.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if v.Prtry != nil {
		fedwire.AddError(&errs, baseName+".Prtry", v.Prtry.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInformation13) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInformation13"
	fedwire.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	if v.SttlmAcct != nil {
		fedwire.AddError(&errs, baseName+".SttlmAcct", v.SttlmAcct.Validate())
	}
	if v.ClrSys != nil {
		fedwire.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	}
	if v.InstgRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".InstgRmbrsmntAgt", v.InstgRmbrsmntAgt.Validate())
	}
	if v.InstgRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".InstgRmbrsmntAgtAcct", v.InstgRmbrsmntAgtAcct.Validate())
	}
	if v.InstdRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".InstdRmbrsmntAgt", v.InstdRmbrsmntAgt.Validate())
	}
	if v.InstdRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".InstdRmbrsmntAgtAcct", v.InstdRmbrsmntAgtAcct.Validate())
	}
	if v.ThrdRmbrsmntAgt != nil {
		fedwire.AddError(&errs, baseName+".ThrdRmbrsmntAgt", v.ThrdRmbrsmntAgt.Validate())
	}
	if v.ThrdRmbrsmntAgtAcct != nil {
		fedwire.AddError(&errs, baseName+".ThrdRmbrsmntAgtAcct", v.ThrdRmbrsmntAgtAcct.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StatementResolutionEntry1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StatementResolutionEntry1"
	if v.OrgnlGrpInf != nil {
		fedwire.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	}
	if v.OrgnlStmtId != nil {
		fedwire.AddError(&errs, baseName+".OrgnlStmtId", v.OrgnlStmtId.Validate())
	}
	if v.AcctSvcrRef != nil {
		fedwire.AddError(&errs, baseName+".AcctSvcrRef", v.AcctSvcrRef.Validate())
	}
	if v.CrrctdAmt != nil {
		fedwire.AddError(&errs, baseName+".CrrctdAmt", v.CrrctdAmt.Validate())
	}
	if v.Chrgs != nil {
		for indx := range v.Chrgs {
			fedwire.AddError(&errs, baseName+".Chrgs", v.Chrgs[indx].Validate())
		}
	}
	if v.Purp != nil {
		fedwire.AddError(&errs, baseName+".Purp", v.Purp.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v StructuredRemittanceInformation7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "StructuredRemittanceInformation7"
	if v.RfrdDocInf != nil {
		for indx := range v.RfrdDocInf {
			fedwire.AddError(&errs, baseName+".RfrdDocInf", v.RfrdDocInf[indx].Validate())
		}
	}
	if v.RfrdDocAmt != nil {
		fedwire.AddError(&errs, baseName+".RfrdDocAmt", v.RfrdDocAmt.Validate())
	}
	if v.CdtrRefInf != nil {
		fedwire.AddError(&errs, baseName+".CdtrRefInf", v.CdtrRefInf.Validate())
	}
	if v.Invcr != nil {
		fedwire.AddError(&errs, baseName+".Invcr", v.Invcr.Validate())
	}
	if v.Invcee != nil {
		fedwire.AddError(&errs, baseName+".Invcee", v.Invcee.Validate())
	}
	if v.AddtlRmtInf != nil {
		for indx := range v.AddtlRmtInf {
			fedwire.AddError(&errs, baseName+".AddtlRmtInf", v.AddtlRmtInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TaxCharges2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TaxCharges2"
	if v.Id != nil {
		fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	}
	if v.Rate != nil {
		fedwire.AddError(&errs, baseName+".Rate", v.Rate.Validate())
	}
	if v.Amt != nil {
		fedwire.AddError(&errs, baseName+".Amt", v.Amt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingTransaction3"
	if v.OrgnlGrpInfAndSts != nil {
		fedwire.AddError(&errs, baseName+".OrgnlGrpInfAndSts", v.OrgnlGrpInfAndSts.Validate())
	}
	if v.OrgnlPmtInfAndSts != nil {
		for indx := range v.OrgnlPmtInfAndSts {
			fedwire.AddError(&errs, baseName+".OrgnlPmtInfAndSts", v.OrgnlPmtInfAndSts[indx].Validate())
		}
	}
	if v.TxInfAndSts != nil {
		for indx := range v.TxInfAndSts {
			fedwire.AddError(&errs, baseName+".TxInfAndSts", v.TxInfAndSts[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v AddressType2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ADDR", "PBOX", "HOME", "BIZZ", "MLTO", "DLVY"); err != nil {
		return err
	}
	return nil
}

func (v AnyBICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v BICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v CancellationIndividualStatus1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RJCR", "ACCR", "PDCR"); err != nil {
		return err
	}
	return nil
}

func (v CashAccountType4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CASH", "CHAR", "COMM", "TAXE", "CISH", "TRAS", "SACC", "CACC", "SVGS", "ONDP", "MGLD", "NREX", "MOMA", "LOAN", "SLRY", "ODFT"); err != nil {
		return err
	}
	return nil
}

func (v ChargeBearerType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DEBT", "CRED", "SHAR", "SLEV"); err != nil {
		return err
	}
	return nil
}

func (v ChargeType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "BRKF", "COMM"); err != nil {
		return err
	}
	return nil
}

func (v ClearingChannel2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RTGS", "RTNS", "MPNS", "BOOK"); err != nil {
		return err
	}
	return nil
}

func (v CountryCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}`); err != nil {
		return err
	}
	return nil
}

func (v CreditDebitCode) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CRDT", "DBIT"); err != nil {
		return err
	}
	return nil
}

func (v DecimalNumber) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 17); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v DocumentType3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "RADM", "RPIN", "FXDR", "DISP", "PUOR", "SCOR"); err != nil {
		return err
	}
	return nil
}

func (v DocumentType5Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "MSIN", "CNFA", "DNFA", "CINV", "CREN", "DEBN", "HIRI", "SBIN", "CMCN", "SOAC", "DISP", "BOLD", "VCHR", "AROI", "TSUT"); err != nil {
		return err
	}
	return nil
}

func (v ExternalAccountIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashClearingSystem1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 3); err != nil {
		return err
	}
	return nil
}

func (v ExternalCategoryPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalClearingSystemIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 5); err != nil {
		return err
	}
	return nil
}

func (v ExternalFinancialInstitutionIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalLocalInstrument1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v ExternalOrganisationIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPersonIdentification1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalPurpose1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Frequency1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "YEAR", "MNTH", "QURT", "MIAN", "WEEK", "DAIL", "ADHO", "INDA"); err != nil {
		return err
	}
	return nil
}

func (v GroupCancellationStatus1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "PACR", "RJCR", "ACCR", "PDCR"); err != nil {
		return err
	}
	return nil
}

func (v IBAN2007Identifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v InvestigationExecutionConfirmation3Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CNCL", "MODI", "IPAY", "ICOV", "MCOV", "INFO", "CONF", "CWFW", "MWFW", "UWFW", "PECR", "PDCR", "RJCR", "SMTC", "SMTI", "CHRG", "PURP", "IDUP"); err != nil {
		return err
	}
	return nil
}

func (v Max1025Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 1025); err != nil {
		return err
	}
	return nil
}

func (v Max105Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 105); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max15NumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[0-9]{1,15}`); err != nil {
		return err
	}
	return nil
}

func (v Max16Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 16); err != nil {
		return err
	}
	return nil
}

func (v Max2048Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 2048); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max70Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 70); err != nil {
		return err
	}
	return nil
}

func (v ModificationRejection2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "UM01", "UM02", "UM03", "UM04", "UM05", "UM06", "UM07", "UM08", "UM09", "UM10", "UM11", "UM12", "UM13", "UM14", "UM15", "UM16", "UM17", "UM18", "UM19", "UM20", "UM21", "UM22", "UM23", "UM24", "UM25", "UM26", "UM27"); err != nil {
		return err
	}
	return nil
}

func (v NamePrefix1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "DOCT", "MIST", "MISS", "MADM"); err != nil {
		return err
	}
	return nil
}

func (v PaymentCancellationRejection1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "LEGL", "AGNT", "CUST"); err != nil {
		return err
	}
	return nil
}

func (v PaymentMethod4Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CHK", "TRF", "DD", "TRA"); err != nil {
		return err
	}
	return nil
}

func (v PercentageRate) Validate() error {
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 10); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 11); err != nil {
		return err
	}
	return nil
}

func (v PhoneNumber) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `\+[0-9]{1,3}-[0-9()+\-]{1,30}`); err != nil {
		return err
	}
	return nil
}

func (v Priority2Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "HIGH", "NORM"); err != nil {
		return err
	}
	return nil
}

func (v SequenceType1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "FRST", "RCUR", "FNAL", "OOFF"); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "INDA", "INGA", "COVE", "CLRG"); err != nil {
		return err
	}
	return nil
}

func (v TransactionIndividualStatus1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "ACTC", "RJCT", "PDNG", "ACCP", "ACSP", "ACSC", "ACCR", "ACWC"); err != nil {
		return err
	}
	return nil
}

func (v TrueFalseIndicator) Validate() error {
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}
