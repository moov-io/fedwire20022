// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.029.001.01
package camt_029_001_01

import (
	"fmt"

	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".Camt02900101", v.Camt02900101.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v Case) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if v.ReopCaseIndctn != nil {
		fedwire.AddError(&errs, baseName+".ReopCaseIndctn", v.ReopCaseIndctn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment"
	fedwire.AddError(&errs, baseName+".Id", v.Id.Validate())
	fedwire.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	fedwire.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	fedwire.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CurrencyAndAmount"

	fedwire.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v InvestigationStatusChoice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "InvestigationStatusChoice"
	if v.Conf != nil {
		fedwire.AddError(&errs, baseName+".Conf", v.Conf.Validate())
	}
	for indx := range v.RjctdMod {
		fedwire.AddError(&errs, baseName+".RjctdMod", v.RjctdMod[indx].Validate())
	}
	if v.RjctdCxl != nil {
		fedwire.AddError(&errs, baseName+".RjctdCxl", v.RjctdCxl.Validate())
	}
	if v.DplctOf != nil {
		fedwire.AddError(&errs, baseName+".DplctOf", v.DplctOf.Validate())
	}
	if v.AssgnmtCxlConf != nil {
		fedwire.AddError(&errs, baseName+".AssgnmtCxlConf", v.AssgnmtCxlConf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentInstructionExtract) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentInstructionExtract"
	if v.AssgnrInstrId != nil {
		fedwire.AddError(&errs, baseName+".AssgnrInstrId", v.AssgnrInstrId.Validate())
	}
	if v.AssgneInstrId != nil {
		fedwire.AddError(&errs, baseName+".AssgneInstrId", v.AssgneInstrId.Validate())
	}
	if v.CcyAmt != nil {
		fedwire.AddError(&errs, baseName+".CcyAmt", v.CcyAmt.Validate())
	}
	if v.ValDt != nil {
		fedwire.AddError(&errs, baseName+".ValDt", v.ValDt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RejectedCancellationJustification) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RejectedCancellationJustification"
	fedwire.AddError(&errs, baseName+".RsnCd", v.RsnCd.Validate())
	if v.Rsn != nil {
		fedwire.AddError(&errs, baseName+".Rsn", v.Rsn.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Camt02900101) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Camt02900101"
	fedwire.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	fedwire.AddError(&errs, baseName+".RslvdCase", v.RslvdCase.Validate())
	if v.Sts != nil {
		fedwire.AddError(&errs, baseName+".Sts", v.Sts.Validate())
	}
	if v.CrrctnTx != nil {
		fedwire.AddError(&errs, baseName+".CrrctnTx", v.CrrctnTx.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v AnyBICIdentifier) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}`); err != nil {
		return err
	}
	return nil
}

func (v CurrencyAndAmountSimpleType) Validate() error {
	if err := fedwire.ValidateMinInclusive(float64(v), 0); err != nil {
		return err
	}
	if err := fedwire.ValidateFractionDigits(fmt.Sprintf("%v", v), 5); err != nil {
		return err
	}
	if err := fedwire.ValidateTotalDigits(fmt.Sprintf("%v", v), 18); err != nil {
		return err
	}
	return nil
}

func (v CurrencyCode) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	return nil
}

func (v InvestigationExecutionConfirmation1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "CNCL", "MODI", "ACDA", "IPAY", "ICOV", "MCOV", "IPYI", "INFO", "CONF", "CWFW"); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v PaymentCancellationRejection1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "LEGL", "AGNT", "CUST"); err != nil {
		return err
	}
	return nil
}

func (v PaymentModificationRejection1Code) Validate() error {
	if err := fedwire.ValidateEnumeration(string(v), "UM01", "UM02", "UM03", "UM04", "UM05", "UM06", "UM07", "UM08", "UM09", "UM10", "UM11", "UM12", "UM13", "UM14", "UM15", "UM16", "UM17", "UM18", "UM19", "UM20", "UM21"); err != nil {
		return err
	}
	return nil
}

func (v YesNoIndicator) Validate() error {
	return nil
}
