// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admi.011.001.01
package admi_011_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/fedwire20022/pkg/fedwire"
)

// XSD Element validations

func (v Document) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Document"
	fedwire.AddError(&errs, baseName+".SysEvtAck", v.SysEvtAck.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations

func (v Event1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Event1"
	fedwire.AddError(&errs, baseName+".EvtCd", v.EvtCd.Validate())
	if v.EvtParam != nil {
		for indx := range v.EvtParam {
			fedwire.AddError(&errs, baseName+".EvtParam", v.EvtParam[indx].Validate())
		}
	}
	if v.EvtDesc != nil {
		fedwire.AddError(&errs, baseName+".EvtDesc", v.EvtDesc.Validate())
	}
	if v.EvtTm != nil {
		fedwire.AddError(&errs, baseName+".EvtTm", v.EvtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryData1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SupplementaryData1"
	if v.PlcAndNm != nil {
		fedwire.AddError(&errs, baseName+".PlcAndNm", v.PlcAndNm.Validate())
	}
	fedwire.AddError(&errs, baseName+".Envlp", v.Envlp.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SupplementaryDataEnvelope1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SystemEventAcknowledgementV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SystemEventAcknowledgementV01"
	fedwire.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	if v.OrgtrRef != nil {
		fedwire.AddError(&errs, baseName+".OrgtrRef", v.OrgtrRef.Validate())
	}
	if v.SttlmSsnIdr != nil {
		fedwire.AddError(&errs, baseName+".SttlmSsnIdr", v.SttlmSsnIdr.Validate())
	}
	if v.AckDtls != nil {
		fedwire.AddError(&errs, baseName+".AckDtls", v.AckDtls.Validate())
	}
	if v.SplmtryData != nil {
		for indx := range v.SplmtryData {
			fedwire.AddError(&errs, baseName+".SplmtryData", v.SplmtryData[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Exact4AlphaNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z0-9]{4}`); err != nil {
		return err
	}
	return nil
}

func (v Max350Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 350); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max4AlphaNumericText) Validate() error {
	if err := fedwire.ValidatePattern(string(v), `[a-zA-Z0-9]{1,4}`); err != nil {
		return err
	}
	if err := fedwire.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := fedwire.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}
